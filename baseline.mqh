#ifndef BASELINE_H
#define BASELINE_H

///////////////////////////////////////////////////////////////////////////////////////////////////////
// Abstract class to determine when crossing the baseline
///////////////////////////////////////////////////////////////////////////////////////////////////////
class Baseline {
   public:
      Baseline(const string, int);
      int Calculate();
   protected:
      int location;
      int period;
      string symbol;
      double base;            // Used for the baseline indicator value
      
      bool BaseTrend(double base, double close);
      virtual double GetBase() = 0;
};
///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////
// IchimokuBase
///////////////////////////////////////////////////////////////////////////////////////////////////////
class IchimokuBase : public Baseline {
   public:
      IchimokuBase(const string, int);
   protected:
      double GetBase();       // Gets location of baseline
};
///////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////
// MovingAverageBase
///////////////////////////////////////////////////////////////////////////////////////////////////////
class MovingAverageBase : public Baseline {
   public:
      MovingAverageBase(const string, int);
   protected:
      double GetBase();       // Gets location of baseline
};
///////////////////////////////////////////////////////////////////////////////////////////////////////

#endif 